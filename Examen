1)
	Herencia de clases: Es cuando una clase hereda todas las propiedades de otra. Por ejemplo una clase Ingeniero podria heredar todas las propiedades de otra que sea Persona y agregar otros atributos exclusivos de su clase.
	Alta cohesión: Consiste en reducir todos los métodos a su version mas simple
	Bajo acoplamiento: Consiste en reducir la dependencia de los métodos todo lo posible.
	Redefinicion de funciones: se hace en caso de que sea posible redefinir una funcion para adaptarse mejor al hijo

2)
	this() 			se usa en los métodos de una clase. Se refiere al objeto del que se la llamo
	super() 		se usa para llamar al constructor de la clase padre.
	super 			se usa para retirar los atributos de la clase padre.
	extends 		se usa para definir cual es la clase padre
	assertTrue()	Se le ingresa un parámetro a testear y considera el test como aprobado en caso de que el parámetro sea true
	assertFalse()	Se le ingresa un parámetro a testear y considera el test como aprobado en caso de que el parámetro sea false
	assertEquals()	se le ingresan 2 parámetros a testear y considera el test como aprobado en caso de que ambos parámetros sean iguales
	enum			se usa para definir una clase de tipo enumerador. Esto significa que sus valores posibles estan definidos desde dentro de 					la clase, y su constructor es privado
	import			se usa para importar librerias a tu código
	package			especifica a que paquete pertenece la clase

3) //voy a la práctica porque me parece mas importante
	
4)
	a)
	b)
	c)
	d)
	e)

5)
	public class Persona
	{
		private String nombre;
		private String apellido;
		private int edad;
		private int DNI;
		private bool sexo; //false=mujer true=hombre
		private String ocupacion;

		public Persona()
		{
			nombre="juan";
			apellido="Perez";
			edad=10;
			DNI=123456789;
			sexo=true;
			ocupacion="estudiante";
		}

		public Persona(String nombreNuevo,String apellidoNuevo, int edadNueva, int DNINuevo, bool sexoNuevo, String ocupacionNueva)
		{
			nombre=nombreNuevo;
			apellido=apellidoNuevo;
			edad=edadNueva;
			DNI=DNINuevo;
			sexo=sexoNuevo;
			ocupacion=ocupacionNueva;
		}

		public void setNombre(String nombreNuevo)
		{
			this.nombre=nombreNuevo;
		}
		public void setApellido(String apellidoNuevo)
		{
			this.apellido=apellidoNuevo;
		}
		public void setEdad(int edadNueva)
		{
			this.edad=edadNueva;
		}
		public void setDNI(int DNINuevo)
		{
			this.DNI=DNINuevo;
		}
		public void setSexo(bool sexoNuevo)
		{
			this.sexo=sexoNuevo;
		}
		public void setOcupacion(String ocupacionNueva)
		{
			this.ocupacion=ocupacionNueva;
		}

		public String getNombre()
		{
			return this.nombre;
		}
		public String getApellido()
		{
			return this.apellido;
		}
		public int getEdad()
		{
			return this.edad;
		}
		public int getDNI()
		{
			return this.DNI;
		}
		public bool getSexo()
		{
			return this.sexo;
		}
		public String getOcupacion()
		{
			return this.ocupacion;
		}

		public bool EsMayorDeEdad()
		{
			if(this.edad>=18)
				return true;

			return false;
		}
		public bool NombreConA()
		{
			for(int i=0;i<this.nombre.length();i++)
			{
				if(this.nombre.charAt(i)=='a')
					return true;
			}
			return false;
		}
		public bool DNIMenorA38Millones()
		{
			if(this.DNI<38000000)
				return true;

			return false;
		}

		public void ImprimirTodo()
		{
			System.out.println(this.nombre);
			System.out.println(this.apellido);
			System.out.println(this.edad);
			System.out.println(this.DNI);
			if(this.sexo)
				System.out.println("Hombre");
			else
				System.out.println("Mujer");
			System.out.println(this.ocupacion);
		}
	}

6)
	public class Hijo extends Persona
	{
		private String escuela;
		private String juegoFavorito;

		public Hijo()
		{
			super();
			escuela="IPM";
			juegoFavorito="Portal";
		}
		public Hijo(String escuelaNueva,String juegoNuevo)
		{
			super();
			escuela=escuelaNueva;
			juegoFavorito=juegoNuevo;
		}
		public void setEscuela(String escuelaNueva)
		{
			this.escuela=escuelaNueva;
		}
		public void setJuego(String juegoNuevo)
		{
			this.juegoFavorito=juegoNuevo;
		}
		public String getEscuela()
		{
			return this.escuela;
		}
		public String getJuego()
		{
			return this.juegoFavorito;
		}

		public void ImprimirTodo()
		{
			System.out.println(super.getNombre());
			System.out.println(super.getApellido());
			System.out.println(super.getEdad());
			System.out.println(super.getDNI());
			if(super.getSexo())
				System.out.println("Hombre");
			else
				System.out.println("Mujer");
			System.out.println(super.getOcupacion());
			System.out.println(this.escuela);
			System.out.println(this.juegoFavorito);
		}
	}
	public class Madre extends Persona
	{
		private String nombreEmpresa;
		private HashSet<Hijo> hijos;

		public Madre()
		{
			super();
			nombreEmpresa="IPM";
			hijos= new HashSet<Hijo>;
		}
		public Madre(String nombreNuevo,String apellidoNuevo, int edadNueva, int DNINuevo, bool sexoNuevo, String ocupacionNueva,String empresaNueva,HashSet<Hijo> hijosNuevo)
		{
			super(nombreNuevo,apellidoNuevo,edadNueva,DNINuevo,sexoNuevo,ocupacionNueva);
			nombreEmpresa=empresaNueva;
			hijos=hijosNuevo;
		}
		public void setEmpresa(String empresaNueva)
		{
			this.nombreEmpresa=empresaNueva;
		}
		public void setHijos(HashSet<Hijo> hijosNuevo)
		{
			this.hijos=hijosNuevo;
		}
		public String getEscuela()
		{
			return this.empresaNueva;
		}
		public HashSet<Hijo> getJuego()
		{
			return this.hijos;
		}

		public HashSet<Hijo> HijosMenoresDeEdad()
		{
			HashSet<Hijo> hijosMenores;
			foreach(Hijo a in this.hijos)
			{
				if(a.getEdad()<18)
					hijosMenores.add(a);
			}
			return hijosMenores;
		}

		public void ImprimirTodo()
		{
			System.out.println(super.getNombre());
			System.out.println(super.getApellido());
			System.out.println(super.getEdad());
			System.out.println(super.getDNI());
			if(super.getSexo())
				System.out.println("Hombre");
			else
				System.out.println("Mujer");
			System.out.println(super.getOcupacion());
			System.out.println(this.nombreEmpresa);
			foreach(Hijo a in this.hijosMenores)
			{
				a.ImprimirTodo();
			}
		}
	}

	//profe pongo todo el test aca porque no tengo ganas de tener varias pestañas

	public class Testeo
	{
		private Persona p1;
		private Persona p2;
		private Persona p3;
		private Madre m1;
		private Hijo h1;

		private void DefinirPersonas()
		{
			p1= new Persona();
			p2= new Persona("Francisco", "Avellaneda", 18, 43567889,true,"Trabajador de McDonalds");
			p3= new Persona("Juana", "Del Arco", 25, 579900,false,"Campesina");
			h1= new Hijo();
			HashSet<Hijo> hijos = new HashSet<Hijo>();
			hijos.add(h1);
			m1=new Madre("Juana", "Del Arco", 37, 579900,false,"Campesina","Francia",hijos);
		}

		@Test
		public void EsMayor()
		{
			DefinirPersonas();
			assertTrue(p2.EsMayorDeEdad());
		}

		@Test
		public void NoEsMayor()
		{
			DefinirPersonas();
			assertFalse(p1.EsMayorDeEdad());
		}

		@Test
		public void TieneA()
		{
			DefinirPersonas();
			assertTrue(p3.NombreConA());
		}

		@Test
		public void NoTieneA()
		{
			DefinirPersonas();
			assertFalse(p2.NombreConA());
		}

		@Test
		public void DNIChico()
		{
			DefinirPersonas();
			assertTrue(p3.DNIMenorA38Millones());
		}

		@Test
		public void DNIGrande()
		{
			DefinirPersonas();
			assertFalse(p2.DNIMenorA38Millones());
		}

		@Test
		public void TieneHijoMenor()
		{
			DefinirPersonas();
			assertEquals(m1.HijosMenoresDeEdad().size(),1);
		}

		@Test
		public void TieneHijoMenor()
		{
			DefinirPersonas();
			HashSet<Hijo> hijos = new HashSet<Hijo>();
			hijos.add(h1);
			Hijo h2= new Hijo();
			h2.setEdad(18);
			hijos.add(h2);
			m1.setHijos(hijos);
			assertEquals(m1.HijosMenoresDeEdad().size(),1);
		}
	}

7)
	public enum Editorial
	{
		Kapelusz,Sudamericana,Atlantida,ElAteneo,Interzona,Sur,Alianza;
	}

	public class Libro
	{
		int precio;
		String nombre;
		Editorial editorial;

		public Libro()
		{
			precio=10;
			nombre="Patito feo"
			editorial = Editorial.Sudamericana;
		}

		public Libro(int precioNuevo, String nombreNuevo, Editorial editorialNueva)
		{
			precio=precioNuevo;
			nombre=nombreNuevo;
			editorial=editorialNueva;
		}

		public int getPrecio()
		{
			return this.precio;
		}
		public String getNombre()
		{
			return this.nombre;
		}
		public Editorial getEditorial()
		{
			return this.editorial;
		}
		public void setPrecio(int precioNuevo)
		{
			this.precio=precioNuevo;
		}
		public void setNombre(String nombreNuevo)
		{
			this.nombre=nombreNuevo;
		}
		public void setEditorial(Editorial editorialNueva)
		{
			this.editorial=editorialNueva;
		}
	}

	public class Libreria
	{
		ArrayList<Libro> librosVendidos;
		HashMap<Editorial,Integer> vendidosPorEditorial;

		public Libreria()
		{
			librosVendidos=new ArrayList<Libro>();
			vendidosPorEditorial=HashMap<Editorial,Integer>();
		}

		public void setLibrosVendidos(ArrayList<Libro> libros)
		{
			this.librosNuevos=libros;
		}
		public void setVendidosPorEditorial(HashMap<Editorial,Integer> vendidosPorEditorialNuevo)
		{
			this.vendidosPorEditorial=vendidosPorEditorialNuevo;
		}

		public void AddVenta(Libro libroVendido)
		{
			this.librosVendidos.add(libroVendido);
			this.vendidosPorEditorial.put(Libro.getEditorial(),this.vendidosPorEditorial.get(libroNuevo.getEditorial())+1);
		}

		public Editorial EditorialMasVendida()
		{
			int cantidadMasVendida=0;
			Editorial editorialMasVendida;
			Editorial[] editoriales=Editorial.values();
			for (int i=0;i<editorial.length;i++) 
			{
				if(this.vendidosPorEditorial.get(editorial[i])>cantidadMasVendida)
				{
					cantidadMasVendida=this.vendidosPorEditorial.get(editorial[i]);
					editorialMasVendida=editorial[i];
				}
			}

			return editorialMasVendida;
		}

		public int VendidosSegunEditorial(Editorial editorialABuscar)
		{
			return this.vendidosPorEditorial.get(editorialABuscar);
		}
	}

	//testeo

	public class Testeo
	{
		@Test 
		public void MasVendidaEsSudamericana()
		{
			Libro l1= new Libro();
			Libro l2= new Libro(5,"Peter Pan",Editorial.Sudamericana);
			Libro l3= new Libro(777,"Luna de pluton",Editorial.Sudamericana);
			Libro l4= new Libro(2130,"La sirenita",Editorial.LaAteneo);
			Libro l5= new Libro(123,"Farenheit 451",Editorial.Interzona);
			Libro l6= new Libro(145,"Los 7 enanitos", Editorial.Sur);
			Libro l7= new Libro(965,"La biblia", Editorial.Alianza);
			Libro l8= new Libro(134,"Sapo pepe",Editorial.Kapelusz);
			Libro l9= new Libro(3456,"Ya no se que libro poner, ayuda",Editorial.Atlantida);
			Libro l10= new Libro(912,"Profe estoy cansado", Editorial.Sudamericana);
			Libro l11= new Libro(63129,"I dont feel so good Mr Stark",Editorial.Sur);

			Libreria libreria = new Libreria();
			libreria.AddVenta(l1);
			libreria.AddVenta(l2);
			libreria.AddVenta(l3);
			libreria.AddVenta(l4);
			libreria.AddVenta(l5);
			libreria.AddVenta(l6);
			libreria.AddVenta(l7);
			libreria.AddVenta(l8);
			libreria.AddVenta(l9);
			libreria.AddVenta(l10);
			libreria.AddVenta(l11);
			assertEquals(libreria.EditorialMasVendida(),Editorial.Sudamericana);
		}

		@Test 
		public void MasVendidaEsSur()
		{
			Libro l1= new Libro();
			Libro l2= new Libro(5,"Peter Pan",Editorial.Sur);
			Libro l3= new Libro(777,"Luna de pluton",Editorial.Sur);
			Libro l4= new Libro(2130,"La sirenita",Editorial.LaAteneo);
			Libro l5= new Libro(123,"Farenheit 451",Editorial.Interzona);
			Libro l6= new Libro(145,"Los 7 enanitos", Editorial.Sur);
			Libro l7= new Libro(965,"La biblia", Editorial.Alianza);
			Libro l8= new Libro(134,"Sapo pepe",Editorial.Kapelusz);
			Libro l9= new Libro(3456,"Ya no se que libro poner, ayuda",Editorial.Atlantida);
			Libro l10= new Libro(912,"Profe estoy cansado", Editorial.Sudamericana);
			Libro l11= new Libro(63129,"I dont feel so good Mr Stark",Editorial.Atlantida);

			Libreria libreria = new Libreria();
			libreria.AddVenta(l1);
			libreria.AddVenta(l2);
			libreria.AddVenta(l3);
			libreria.AddVenta(l4);
			libreria.AddVenta(l5);
			libreria.AddVenta(l6);
			libreria.AddVenta(l7);
			libreria.AddVenta(l8);
			libreria.AddVenta(l9);
			libreria.AddVenta(l10);
			libreria.AddVenta(l11);
			assertEquals(libreria.EditorialMasVendida(),Editorial.Atlantida);
		}

		@Test 
		public void VendidosEnSudamericana()
		{
			Libro l1= new Libro();
			Libro l2= new Libro(5,"Peter Pan",Editorial.Sudamericana);
			Libro l3= new Libro(777,"Luna de pluton",Editorial.Sudamericana);
			Libro l4= new Libro(2130,"La sirenita",Editorial.LaAteneo);
			Libro l5= new Libro(123,"Farenheit 451",Editorial.Interzona);
			Libro l6= new Libro(145,"Los 7 enanitos", Editorial.Sur);
			Libro l7= new Libro(965,"La biblia", Editorial.Alianza);
			Libro l8= new Libro(134,"Sapo pepe",Editorial.Kapelusz);
			Libro l9= new Libro(3456,"Ya no se que libro poner, ayuda",Editorial.Atlantida);
			Libro l10= new Libro(912,"Profe estoy cansado", Editorial.Sudamericana);
			Libro l11= new Libro(63129,"I dont feel so good Mr Stark",Editorial.Sur);

			Libreria libreria = new Libreria();
			libreria.AddVenta(l1);
			libreria.AddVenta(l2);
			libreria.AddVenta(l3);
			libreria.AddVenta(l4);
			libreria.AddVenta(l5);
			libreria.AddVenta(l6);
			libreria.AddVenta(l7);
			libreria.AddVenta(l8);
			libreria.AddVenta(l9);
			libreria.AddVenta(l10);
			libreria.AddVenta(l11);
			assertEquals(libreria.VendidosSegunEditorial(Editorial.Sudamericana),3);
		}
	}

